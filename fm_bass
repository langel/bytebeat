vol = 0.5,
tempo = 6480,
sample_rate = 44100,

// FM Bass

(typeof ram == 'undefined') ? ram = [0,0,0,0,0,0] : 0,

note_hertz = function(steps_from_a) {
	return 420 * Math.pow(1.059463, steps_from_a);
},

sine_wave = function(frequency) {
	duty_length = sample_rate / frequency;
	return Math.sin(t / duty_length * (2 * Math.PI));
},

decay_exponential = function(start, length, curve) {   
	if (start + length < t) return 0;
	e_pos = ((t - start)) / length;
	return (1 / (e_pos + 1 / curve)) / curve;
},

fm = function(car_frequency, mod_sine, str) {
	// car_frequency is in hertz
	// mod_sine is -1 .. 1
	mod_sine *= str;
	return car_frequency * ((mod_sine > 0) ? mod_sine * 2 : 1 + mod_sine * 0.5);
},

// check for new trigger
(t % (tempo * 4) == 0) ? ram[0] = t : 0,
(t % (tempo * 5) == 0) ? ram[0] = t : 0,
(t % (tempo * 13) == 0) ? ram[0] = t : 0,

// bytebeat melody
(ram[0] == t) ? p = note_hertz(-30 + ((t / tempo) & 27) + ((t >> 16) % 4) * 3) : 0,



// run sample against decay envelope
fm1 = function(p) {
	s = sine_wave(p * 5) * decay_exponential(ram[0], 1800, 200);
	s = sine_wave(fm(p * 4, s, 0.00001)) * decay_exponential(ram[0], 800, 20);
	s = sine_wave(fm(p / 2, s, 0.000001)) * decay_exponential(ram[0], 81800, 2);
	s = sine_wave(fm(p, s, 0.00001)) * decay_exponential(ram[0], 51800, 10);
	return s * 100;
},

//s = fm1(p) + ((p > 220) ? fm1(p * 1.5) : 0),
s = fm1(p),

// output
s * vol + 127
